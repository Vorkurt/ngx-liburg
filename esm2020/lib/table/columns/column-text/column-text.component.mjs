import { Component, EventEmitter, Output, ViewEncapsulation, } from '@angular/core';
import { BaseColumn } from '../../base-column';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@angular/forms";
import * as i3 from "@angular/material/form-field";
import * as i4 from "@angular/material/input";
import * as i5 from "@angular/material/table";
export class ColumnTextComponent extends BaseColumn {
    constructor() {
        super(...arguments);
        this.onValueChanges = new EventEmitter();
    }
    changeEntity(rowElement) {
        this.onValueChanges.emit(rowElement);
    }
}
ColumnTextComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: ColumnTextComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });
ColumnTextComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.3.0", type: ColumnTextComponent, selector: "elix-column-text", outputs: { onValueChanges: "onValueChanges" }, providers: [{ provide: BaseColumn, useExisting: ColumnTextComponent }], usesInheritance: true, ngImport: i0, template: "<ng-container [matColumnDef]=\"field\" >\n  <mat-header-cell [class]=\"className\" mat-header-cell *matHeaderCellDef>\n    {{ name }}\n  </mat-header-cell>\n  <mat-cell [class]=\"className\" mat-cell *matCellDef=\"let element\">\n    <mat-form-field\n      appearance=\"outline\"\n      *ngIf=\"element.editable && editRow; else prettyText\"\n      class=\"column-text__edit\"\n    >\n      <input class=\"text-input\"\n        [(ngModel)]=\"element.model[field]\"\n        (ngModelChange)=\"element.model[field] = $event; changeEntity({change: {dataChanged: element.model[field], data: field}})\"\n        matInput\n      />\n    </mat-form-field>\n    <ng-template #prettyText>\n      <div class=\"text-disable dark:text-white\">\n      {{ element.model[field] }}\n    </div>\n    </ng-template>\n  </mat-cell>\n  <mat-footer-cell *matFooterCellDef>\n      {{footerMessage}}\n  </mat-footer-cell>\n</ng-container>\n", styles: [".text-input{background:white!important;padding:.8rem .4rem .4rem!important;margin:0!important}.text-disable{padding:.4rem!important}\n"], dependencies: [{ kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "component", type: i3.MatFormField, selector: "mat-form-field", inputs: ["color", "appearance", "hideRequiredMarker", "hintLabel", "floatLabel"], exportAs: ["matFormField"] }, { kind: "directive", type: i4.MatInput, selector: "input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]", inputs: ["disabled", "id", "placeholder", "name", "required", "type", "errorStateMatcher", "aria-describedby", "value", "readonly"], exportAs: ["matInput"] }, { kind: "directive", type: i5.MatHeaderCellDef, selector: "[matHeaderCellDef]" }, { kind: "directive", type: i5.MatColumnDef, selector: "[matColumnDef]", inputs: ["sticky", "matColumnDef"] }, { kind: "directive", type: i5.MatCellDef, selector: "[matCellDef]" }, { kind: "directive", type: i5.MatFooterCellDef, selector: "[matFooterCellDef]" }, { kind: "directive", type: i5.MatHeaderCell, selector: "mat-header-cell, th[mat-header-cell]" }, { kind: "directive", type: i5.MatCell, selector: "mat-cell, td[mat-cell]" }, { kind: "directive", type: i5.MatFooterCell, selector: "mat-footer-cell, td[mat-footer-cell]" }], encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: ColumnTextComponent, decorators: [{
            type: Component,
            args: [{ selector: 'elix-column-text', providers: [{ provide: BaseColumn, useExisting: ColumnTextComponent }], encapsulation: ViewEncapsulation.None, template: "<ng-container [matColumnDef]=\"field\" >\n  <mat-header-cell [class]=\"className\" mat-header-cell *matHeaderCellDef>\n    {{ name }}\n  </mat-header-cell>\n  <mat-cell [class]=\"className\" mat-cell *matCellDef=\"let element\">\n    <mat-form-field\n      appearance=\"outline\"\n      *ngIf=\"element.editable && editRow; else prettyText\"\n      class=\"column-text__edit\"\n    >\n      <input class=\"text-input\"\n        [(ngModel)]=\"element.model[field]\"\n        (ngModelChange)=\"element.model[field] = $event; changeEntity({change: {dataChanged: element.model[field], data: field}})\"\n        matInput\n      />\n    </mat-form-field>\n    <ng-template #prettyText>\n      <div class=\"text-disable dark:text-white\">\n      {{ element.model[field] }}\n    </div>\n    </ng-template>\n  </mat-cell>\n  <mat-footer-cell *matFooterCellDef>\n      {{footerMessage}}\n  </mat-footer-cell>\n</ng-container>\n", styles: [".text-input{background:white!important;padding:.8rem .4rem .4rem!important;margin:0!important}.text-disable{padding:.4rem!important}\n"] }]
        }], propDecorators: { onValueChanges: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sdW1uLXRleHQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LWxpYnVyZy9zcmMvbGliL3RhYmxlL2NvbHVtbnMvY29sdW1uLXRleHQvY29sdW1uLXRleHQuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LWxpYnVyZy9zcmMvbGliL3RhYmxlL2NvbHVtbnMvY29sdW1uLXRleHQvY29sdW1uLXRleHQuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLFNBQVMsRUFDVCxZQUFZLEVBQ1osTUFBTSxFQUNOLGlCQUFpQixHQUNsQixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7Ozs7Ozs7QUFTL0MsTUFBTSxPQUFPLG1CQUF1QixTQUFRLFVBQVU7SUFQdEQ7O1FBU1MsbUJBQWMsR0FDbkIsSUFBSSxZQUFZLEVBQUUsQ0FBQztLQUt0QjtJQUhRLFlBQVksQ0FBQyxVQUE2QjtRQUMvQyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUN2QyxDQUFDOztnSEFQVSxtQkFBbUI7b0dBQW5CLG1CQUFtQiwwRkFIbkIsQ0FBRSxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLG1CQUFtQixFQUFFLENBQUUsaURDWjFFLHU1QkEwQkE7MkZEWGEsbUJBQW1CO2tCQVAvQixTQUFTOytCQUNFLGtCQUFrQixhQUdqQixDQUFFLEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBRSxXQUFXLHFCQUFxQixFQUFFLENBQUUsaUJBQ3pELGlCQUFpQixDQUFDLElBQUk7OEJBSTlCLGNBQWM7c0JBRHBCLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDb21wb25lbnQsXG4gIEV2ZW50RW1pdHRlcixcbiAgT3V0cHV0LFxuICBWaWV3RW5jYXBzdWxhdGlvbixcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBCYXNlQ29sdW1uIH0gZnJvbSAnLi4vLi4vYmFzZS1jb2x1bW4nO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdlbGl4LWNvbHVtbi10ZXh0JyxcbiAgdGVtcGxhdGVVcmw6ICcuL2NvbHVtbi10ZXh0LmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbICcuL2NvbHVtbi10ZXh0LmNvbXBvbmVudC5zY3NzJyBdLFxuICBwcm92aWRlcnM6IFsgeyBwcm92aWRlOiBCYXNlQ29sdW1uLCB1c2VFeGlzdGluZzogQ29sdW1uVGV4dENvbXBvbmVudCB9IF0sXG4gIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXG59KVxuZXhwb3J0IGNsYXNzIENvbHVtblRleHRDb21wb25lbnQ8VD4gZXh0ZW5kcyBCYXNlQ29sdW1uIHtcbiAgQE91dHB1dCgpXG4gIHB1YmxpYyBvblZhbHVlQ2hhbmdlczogRXZlbnRFbWl0dGVyPHtjaGFuZ2U6IHVua25vd259PiA9XG4gICAgbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gIHB1YmxpYyBjaGFuZ2VFbnRpdHkocm93RWxlbWVudDoge2NoYW5nZTogdW5rbm93bn0pe1xuICAgIHRoaXMub25WYWx1ZUNoYW5nZXMuZW1pdChyb3dFbGVtZW50KTtcbiAgfVxufVxuIiwiPG5nLWNvbnRhaW5lciBbbWF0Q29sdW1uRGVmXT1cImZpZWxkXCIgPlxuICA8bWF0LWhlYWRlci1jZWxsIFtjbGFzc109XCJjbGFzc05hbWVcIiBtYXQtaGVhZGVyLWNlbGwgKm1hdEhlYWRlckNlbGxEZWY+XG4gICAge3sgbmFtZSB9fVxuICA8L21hdC1oZWFkZXItY2VsbD5cbiAgPG1hdC1jZWxsIFtjbGFzc109XCJjbGFzc05hbWVcIiBtYXQtY2VsbCAqbWF0Q2VsbERlZj1cImxldCBlbGVtZW50XCI+XG4gICAgPG1hdC1mb3JtLWZpZWxkXG4gICAgICBhcHBlYXJhbmNlPVwib3V0bGluZVwiXG4gICAgICAqbmdJZj1cImVsZW1lbnQuZWRpdGFibGUgJiYgZWRpdFJvdzsgZWxzZSBwcmV0dHlUZXh0XCJcbiAgICAgIGNsYXNzPVwiY29sdW1uLXRleHRfX2VkaXRcIlxuICAgID5cbiAgICAgIDxpbnB1dCBjbGFzcz1cInRleHQtaW5wdXRcIlxuICAgICAgICBbKG5nTW9kZWwpXT1cImVsZW1lbnQubW9kZWxbZmllbGRdXCJcbiAgICAgICAgKG5nTW9kZWxDaGFuZ2UpPVwiZWxlbWVudC5tb2RlbFtmaWVsZF0gPSAkZXZlbnQ7IGNoYW5nZUVudGl0eSh7Y2hhbmdlOiB7ZGF0YUNoYW5nZWQ6IGVsZW1lbnQubW9kZWxbZmllbGRdLCBkYXRhOiBmaWVsZH19KVwiXG4gICAgICAgIG1hdElucHV0XG4gICAgICAvPlxuICAgIDwvbWF0LWZvcm0tZmllbGQ+XG4gICAgPG5nLXRlbXBsYXRlICNwcmV0dHlUZXh0PlxuICAgICAgPGRpdiBjbGFzcz1cInRleHQtZGlzYWJsZSBkYXJrOnRleHQtd2hpdGVcIj5cbiAgICAgIHt7IGVsZW1lbnQubW9kZWxbZmllbGRdIH19XG4gICAgPC9kaXY+XG4gICAgPC9uZy10ZW1wbGF0ZT5cbiAgPC9tYXQtY2VsbD5cbiAgPG1hdC1mb290ZXItY2VsbCAqbWF0Rm9vdGVyQ2VsbERlZj5cbiAgICAgIHt7Zm9vdGVyTWVzc2FnZX19XG4gIDwvbWF0LWZvb3Rlci1jZWxsPlxuPC9uZy1jb250YWluZXI+XG4iXX0=