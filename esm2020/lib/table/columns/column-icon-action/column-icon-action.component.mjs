import { Component, Input } from '@angular/core';
import { BaseColumn } from '../../base-column';
import * as i0 from "@angular/core";
import * as i1 from "../service/column-rotate.service";
import * as i2 from "@angular/common";
import * as i3 from "@angular/material/button";
import * as i4 from "@angular/material/icon";
import * as i5 from "@angular/material/table";
export class ColumnIconActionComponent extends BaseColumn {
    constructor(_columnRotate) {
        super();
        this._columnRotate = _columnRotate;
        this.iconAction = false;
    }
    scrollColumn(left) {
        this._columnRotate.setSide(left);
    }
}
ColumnIconActionComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: ColumnIconActionComponent, deps: [{ token: i1.ColumnRotateService }], target: i0.ɵɵFactoryTarget.Component });
ColumnIconActionComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.3.0", type: ColumnIconActionComponent, selector: "elix-column-icon-action", inputs: { iconAction: "iconAction" }, providers: [{
            provide: BaseColumn,
            useExisting: ColumnIconActionComponent
        }], usesInheritance: true, ngImport: i0, template: "<ng-container [matColumnDef]=\"field\">\n  <mat-header-cell [class]=\"className\" mat-header-cell *matHeaderCellDef=\"let element\"\n  >\n    <ng-container *ngIf=\"!iconAction\">\n      {{\n      name\n      }}\n    </ng-container>\n    <ng-container *ngIf=\"iconAction\">\n      <button mat-button\n              (click)=\"scrollColumn('left')\"\n      >\n        <mat-icon\n          [svgIcon]=\"'fa_solid:arrow-left'\"\n        ></mat-icon>\n      </button>\n      <button mat-button\n              (click)=\"scrollColumn('right')\">\n        <mat-icon\n          [svgIcon]=\"'fa_solid:arrow-right'\"\n        ></mat-icon>\n      </button>\n    </ng-container>\n  </mat-header-cell>\n  <mat-cell [class]=\"className\" mat-cell *matCellDef=\"let element\">\n    <ng-container *ngIf=\"!iconAction\">\n\n      <ng-container *ngFor=\"let action of element.actions\">\n        <button\n          mat-button\n          (click)=\"action.method(element)\"\n          [class]=\"action.classCss\"\n        >\n          <mat-icon [svgIcon]=\"action.iconClass\"></mat-icon>\n        </button>\n      </ng-container>\n    </ng-container>\n  </mat-cell>\n  <mat-footer-cell *matFooterCellDef>\n    <ng-container *ngIf=\"!iconAction\">\n      {{ footerMessage }}\n    </ng-container>\n  </mat-footer-cell>\n</ng-container>\n", styles: [""], dependencies: [{ kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i3.MatButton, selector: "button[mat-button], button[mat-raised-button], button[mat-icon-button],             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],             button[mat-flat-button]", inputs: ["disabled", "disableRipple", "color"], exportAs: ["matButton"] }, { kind: "component", type: i4.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }, { kind: "directive", type: i5.MatHeaderCellDef, selector: "[matHeaderCellDef]" }, { kind: "directive", type: i5.MatColumnDef, selector: "[matColumnDef]", inputs: ["sticky", "matColumnDef"] }, { kind: "directive", type: i5.MatCellDef, selector: "[matCellDef]" }, { kind: "directive", type: i5.MatFooterCellDef, selector: "[matFooterCellDef]" }, { kind: "directive", type: i5.MatHeaderCell, selector: "mat-header-cell, th[mat-header-cell]" }, { kind: "directive", type: i5.MatCell, selector: "mat-cell, td[mat-cell]" }, { kind: "directive", type: i5.MatFooterCell, selector: "mat-footer-cell, td[mat-footer-cell]" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: ColumnIconActionComponent, decorators: [{
            type: Component,
            args: [{ selector: 'elix-column-icon-action', providers: [{
                            provide: BaseColumn,
                            useExisting: ColumnIconActionComponent
                        }], template: "<ng-container [matColumnDef]=\"field\">\n  <mat-header-cell [class]=\"className\" mat-header-cell *matHeaderCellDef=\"let element\"\n  >\n    <ng-container *ngIf=\"!iconAction\">\n      {{\n      name\n      }}\n    </ng-container>\n    <ng-container *ngIf=\"iconAction\">\n      <button mat-button\n              (click)=\"scrollColumn('left')\"\n      >\n        <mat-icon\n          [svgIcon]=\"'fa_solid:arrow-left'\"\n        ></mat-icon>\n      </button>\n      <button mat-button\n              (click)=\"scrollColumn('right')\">\n        <mat-icon\n          [svgIcon]=\"'fa_solid:arrow-right'\"\n        ></mat-icon>\n      </button>\n    </ng-container>\n  </mat-header-cell>\n  <mat-cell [class]=\"className\" mat-cell *matCellDef=\"let element\">\n    <ng-container *ngIf=\"!iconAction\">\n\n      <ng-container *ngFor=\"let action of element.actions\">\n        <button\n          mat-button\n          (click)=\"action.method(element)\"\n          [class]=\"action.classCss\"\n        >\n          <mat-icon [svgIcon]=\"action.iconClass\"></mat-icon>\n        </button>\n      </ng-container>\n    </ng-container>\n  </mat-cell>\n  <mat-footer-cell *matFooterCellDef>\n    <ng-container *ngIf=\"!iconAction\">\n      {{ footerMessage }}\n    </ng-container>\n  </mat-footer-cell>\n</ng-container>\n" }]
        }], ctorParameters: function () { return [{ type: i1.ColumnRotateService }]; }, propDecorators: { iconAction: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sdW1uLWljb24tYWN0aW9uLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1saWJ1cmcvc3JjL2xpYi90YWJsZS9jb2x1bW5zL2NvbHVtbi1pY29uLWFjdGlvbi9jb2x1bW4taWNvbi1hY3Rpb24uY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LWxpYnVyZy9zcmMvbGliL3RhYmxlL2NvbHVtbnMvY29sdW1uLWljb24tYWN0aW9uL2NvbHVtbi1pY29uLWFjdGlvbi5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNqRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7Ozs7Ozs7QUFZL0MsTUFBTSxPQUFPLHlCQUEwQixTQUFRLFVBQVU7SUFJdkQsWUFBNkIsYUFBa0M7UUFDN0QsS0FBSyxFQUFFLENBQUM7UUFEbUIsa0JBQWEsR0FBYixhQUFhLENBQXFCO1FBRi9ELGVBQVUsR0FBWSxLQUFLLENBQUM7SUFJNUIsQ0FBQztJQUVELFlBQVksQ0FBQyxJQUFZO1FBQ3ZCLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFBO0lBQ2xDLENBQUM7O3NIQVZVLHlCQUF5QjswR0FBekIseUJBQXlCLHdGQUx6QixDQUFFO1lBQ1gsT0FBTyxFQUFFLFVBQVU7WUFDbkIsV0FBVyxFQUFFLHlCQUF5QjtTQUN2QyxDQUFFLGlEQ1hMLGt5Q0E0Q0E7MkZEL0JhLHlCQUF5QjtrQkFUckMsU0FBUzsrQkFDRSx5QkFBeUIsYUFHeEIsQ0FBRTs0QkFDWCxPQUFPLEVBQUUsVUFBVTs0QkFDbkIsV0FBVywyQkFBMkI7eUJBQ3ZDLENBQUU7MEdBSUgsVUFBVTtzQkFEVCxLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQmFzZUNvbHVtbiB9IGZyb20gJy4uLy4uL2Jhc2UtY29sdW1uJztcbmltcG9ydCB7IENvbHVtblJvdGF0ZVNlcnZpY2UgfSBmcm9tIFwiLi4vc2VydmljZS9jb2x1bW4tcm90YXRlLnNlcnZpY2VcIjtcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZWxpeC1jb2x1bW4taWNvbi1hY3Rpb24nLFxuICB0ZW1wbGF0ZVVybDogJy4vY29sdW1uLWljb24tYWN0aW9uLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbICcuL2NvbHVtbi1pY29uLWFjdGlvbi5jb21wb25lbnQuc2NzcycgXSxcbiAgcHJvdmlkZXJzOiBbIHtcbiAgICBwcm92aWRlOiBCYXNlQ29sdW1uLFxuICAgIHVzZUV4aXN0aW5nOiBDb2x1bW5JY29uQWN0aW9uQ29tcG9uZW50XG4gIH0gXSxcbn0pXG5leHBvcnQgY2xhc3MgQ29sdW1uSWNvbkFjdGlvbkNvbXBvbmVudCBleHRlbmRzIEJhc2VDb2x1bW4ge1xuICBASW5wdXQoKVxuICBpY29uQWN0aW9uOiBib29sZWFuID0gZmFsc2U7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBfY29sdW1uUm90YXRlOiBDb2x1bW5Sb3RhdGVTZXJ2aWNlKXtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgc2Nyb2xsQ29sdW1uKGxlZnQ6IHN0cmluZyl7XG4gICAgdGhpcy5fY29sdW1uUm90YXRlLnNldFNpZGUobGVmdClcbiAgfVxuXG59XG4iLCI8bmctY29udGFpbmVyIFttYXRDb2x1bW5EZWZdPVwiZmllbGRcIj5cbiAgPG1hdC1oZWFkZXItY2VsbCBbY2xhc3NdPVwiY2xhc3NOYW1lXCIgbWF0LWhlYWRlci1jZWxsICptYXRIZWFkZXJDZWxsRGVmPVwibGV0IGVsZW1lbnRcIlxuICA+XG4gICAgPG5nLWNvbnRhaW5lciAqbmdJZj1cIiFpY29uQWN0aW9uXCI+XG4gICAgICB7e1xuICAgICAgbmFtZVxuICAgICAgfX1cbiAgICA8L25nLWNvbnRhaW5lcj5cbiAgICA8bmctY29udGFpbmVyICpuZ0lmPVwiaWNvbkFjdGlvblwiPlxuICAgICAgPGJ1dHRvbiBtYXQtYnV0dG9uXG4gICAgICAgICAgICAgIChjbGljayk9XCJzY3JvbGxDb2x1bW4oJ2xlZnQnKVwiXG4gICAgICA+XG4gICAgICAgIDxtYXQtaWNvblxuICAgICAgICAgIFtzdmdJY29uXT1cIidmYV9zb2xpZDphcnJvdy1sZWZ0J1wiXG4gICAgICAgID48L21hdC1pY29uPlxuICAgICAgPC9idXR0b24+XG4gICAgICA8YnV0dG9uIG1hdC1idXR0b25cbiAgICAgICAgICAgICAgKGNsaWNrKT1cInNjcm9sbENvbHVtbigncmlnaHQnKVwiPlxuICAgICAgICA8bWF0LWljb25cbiAgICAgICAgICBbc3ZnSWNvbl09XCInZmFfc29saWQ6YXJyb3ctcmlnaHQnXCJcbiAgICAgICAgPjwvbWF0LWljb24+XG4gICAgICA8L2J1dHRvbj5cbiAgICA8L25nLWNvbnRhaW5lcj5cbiAgPC9tYXQtaGVhZGVyLWNlbGw+XG4gIDxtYXQtY2VsbCBbY2xhc3NdPVwiY2xhc3NOYW1lXCIgbWF0LWNlbGwgKm1hdENlbGxEZWY9XCJsZXQgZWxlbWVudFwiPlxuICAgIDxuZy1jb250YWluZXIgKm5nSWY9XCIhaWNvbkFjdGlvblwiPlxuXG4gICAgICA8bmctY29udGFpbmVyICpuZ0Zvcj1cImxldCBhY3Rpb24gb2YgZWxlbWVudC5hY3Rpb25zXCI+XG4gICAgICAgIDxidXR0b25cbiAgICAgICAgICBtYXQtYnV0dG9uXG4gICAgICAgICAgKGNsaWNrKT1cImFjdGlvbi5tZXRob2QoZWxlbWVudClcIlxuICAgICAgICAgIFtjbGFzc109XCJhY3Rpb24uY2xhc3NDc3NcIlxuICAgICAgICA+XG4gICAgICAgICAgPG1hdC1pY29uIFtzdmdJY29uXT1cImFjdGlvbi5pY29uQ2xhc3NcIj48L21hdC1pY29uPlxuICAgICAgICA8L2J1dHRvbj5cbiAgICAgIDwvbmctY29udGFpbmVyPlxuICAgIDwvbmctY29udGFpbmVyPlxuICA8L21hdC1jZWxsPlxuICA8bWF0LWZvb3Rlci1jZWxsICptYXRGb290ZXJDZWxsRGVmPlxuICAgIDxuZy1jb250YWluZXIgKm5nSWY9XCIhaWNvbkFjdGlvblwiPlxuICAgICAge3sgZm9vdGVyTWVzc2FnZSB9fVxuICAgIDwvbmctY29udGFpbmVyPlxuICA8L21hdC1mb290ZXItY2VsbD5cbjwvbmctY29udGFpbmVyPlxuIl19