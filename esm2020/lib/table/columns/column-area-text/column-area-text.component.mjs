import { Component, ViewChild, } from '@angular/core';
import { BaseColumn } from '../../base-column';
import * as i0 from "@angular/core";
import * as i1 from "./elix-tooltip.service";
import * as i2 from "@angular/common";
import * as i3 from "@angular/forms";
import * as i4 from "@angular/material/input";
import * as i5 from "@angular/material/table";
import * as i6 from "../../tooltip/tooltip.component";
export class ColumnAreaTextComponent extends BaseColumn {
    constructor(_elixTooltip, _viewContainer) {
        super();
        this._elixTooltip = _elixTooltip;
        this._viewContainer = _viewContainer;
        this.value = false;
        this.width = 400;
    }
    openTooltip(element, model) {
        this.value = false;
        if (!this.tooltipOverlay || !this.tooltipOverlay.hasAttached()) {
            this.vars = model.model[this.field];
            this.tooltipOverlay = this._elixTooltip.initTooltip(this.tooltipRef, this._viewContainer, element, this.width);
            // @ts-ignore
            this.tooltipOverlay.backdropElement.classList.add('cursor-pointer');
        }
    }
    closeTooltip() {
        this.value = true;
        this.tooltipOverlay.detach();
        this.tooltipOverlay.dispose();
    }
    doubleClick(element, value) {
        this.value = true;
        element.editable = value;
    }
}
ColumnAreaTextComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: ColumnAreaTextComponent, deps: [{ token: i1.ElixTooltipService }, { token: i0.ViewContainerRef }], target: i0.ɵɵFactoryTarget.Component });
ColumnAreaTextComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.3.0", type: ColumnAreaTextComponent, selector: "elix-column-area-text", providers: [{ provide: BaseColumn, useExisting: ColumnAreaTextComponent }], viewQueries: [{ propertyName: "tooltipRef", first: true, predicate: ["tooltipRef"], descendants: true }], usesInheritance: true, ngImport: i0, template: "<ng-container [matColumnDef]=\"field\">\n  <mat-header-cell [class]=\"className\" mat-header-cell *matHeaderCellDef>{{\n    name\n  }}</mat-header-cell>\n  <mat-cell\n    [class]=\"className\"\n    mat-cell\n    *matCellDef=\"let element\"\n    (click)=\"element.model['field'] !== '' && openTooltip(reference, element)\"\n    #reference\n  >\n    <textarea\n      matInput\n      [(ngModel)]=\"element.model[field]\"\n      [disabled]=\"element.editable\"\n      [ngStyle]=\"{ color: 'black' }\"\n    ></textarea>\n\n    <ng-template #tooltipRef>\n      <elix-tooltip [width]=\"width\">{{ vars }}</elix-tooltip>\n    </ng-template>\n  </mat-cell>\n  <mat-footer-cell *matFooterCellDef>\n    {{ footerMessage }}\n  </mat-footer-cell>\n</ng-container>\n", styles: [""], dependencies: [{ kind: "directive", type: i2.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { kind: "directive", type: i3.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "directive", type: i4.MatInput, selector: "input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]", inputs: ["disabled", "id", "placeholder", "name", "required", "type", "errorStateMatcher", "aria-describedby", "value", "readonly"], exportAs: ["matInput"] }, { kind: "directive", type: i5.MatHeaderCellDef, selector: "[matHeaderCellDef]" }, { kind: "directive", type: i5.MatColumnDef, selector: "[matColumnDef]", inputs: ["sticky", "matColumnDef"] }, { kind: "directive", type: i5.MatCellDef, selector: "[matCellDef]" }, { kind: "directive", type: i5.MatFooterCellDef, selector: "[matFooterCellDef]" }, { kind: "directive", type: i5.MatHeaderCell, selector: "mat-header-cell, th[mat-header-cell]" }, { kind: "directive", type: i5.MatCell, selector: "mat-cell, td[mat-cell]" }, { kind: "directive", type: i5.MatFooterCell, selector: "mat-footer-cell, td[mat-footer-cell]" }, { kind: "component", type: i6.TooltipComponent, selector: "elix-tooltip", inputs: ["width"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.3.0", ngImport: i0, type: ColumnAreaTextComponent, decorators: [{
            type: Component,
            args: [{ selector: 'elix-column-area-text', providers: [{ provide: BaseColumn, useExisting: ColumnAreaTextComponent }], template: "<ng-container [matColumnDef]=\"field\">\n  <mat-header-cell [class]=\"className\" mat-header-cell *matHeaderCellDef>{{\n    name\n  }}</mat-header-cell>\n  <mat-cell\n    [class]=\"className\"\n    mat-cell\n    *matCellDef=\"let element\"\n    (click)=\"element.model['field'] !== '' && openTooltip(reference, element)\"\n    #reference\n  >\n    <textarea\n      matInput\n      [(ngModel)]=\"element.model[field]\"\n      [disabled]=\"element.editable\"\n      [ngStyle]=\"{ color: 'black' }\"\n    ></textarea>\n\n    <ng-template #tooltipRef>\n      <elix-tooltip [width]=\"width\">{{ vars }}</elix-tooltip>\n    </ng-template>\n  </mat-cell>\n  <mat-footer-cell *matFooterCellDef>\n    {{ footerMessage }}\n  </mat-footer-cell>\n</ng-container>\n" }]
        }], ctorParameters: function () { return [{ type: i1.ElixTooltipService }, { type: i0.ViewContainerRef }]; }, propDecorators: { tooltipRef: [{
                type: ViewChild,
                args: ['tooltipRef']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sdW1uLWFyZWEtdGV4dC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtbGlidXJnL3NyYy9saWIvdGFibGUvY29sdW1ucy9jb2x1bW4tYXJlYS10ZXh0L2NvbHVtbi1hcmVhLXRleHQuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LWxpYnVyZy9zcmMvbGliL3RhYmxlL2NvbHVtbnMvY29sdW1uLWFyZWEtdGV4dC9jb2x1bW4tYXJlYS10ZXh0LmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCxTQUFTLEVBRVQsU0FBUyxHQUVWLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQzs7Ozs7Ozs7QUFXL0MsTUFBTSxPQUFPLHVCQUF3QixTQUFRLFVBQVU7SUFTckQsWUFFVSxZQUFnQyxFQUNoQyxjQUFnQztRQUV4QyxLQUFLLEVBQUUsQ0FBQztRQUhBLGlCQUFZLEdBQVosWUFBWSxDQUFvQjtRQUNoQyxtQkFBYyxHQUFkLGNBQWMsQ0FBa0I7UUFYMUMsVUFBSyxHQUFZLEtBQUssQ0FBQztRQU12QixVQUFLLEdBQVcsR0FBRyxDQUFDO0lBUXBCLENBQUM7SUFFRCxXQUFXLENBQUMsT0FBb0IsRUFBRSxLQUFtQztRQUNuRSxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsV0FBVyxFQUFFLEVBQUU7WUFDOUQsSUFBSSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNwQyxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxDQUNqRCxJQUFJLENBQUMsVUFBVSxFQUNmLElBQUksQ0FBQyxjQUFjLEVBQ25CLE9BQU8sRUFDUCxJQUFJLENBQUMsS0FBSyxDQUNYLENBQUM7WUFDRixhQUFhO1lBQ2IsSUFBSSxDQUFDLGNBQWMsQ0FBQyxlQUFlLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1NBQ3JFO0lBQ0gsQ0FBQztJQUVELFlBQVk7UUFDVixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztRQUNsQixJQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQzdCLElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDaEMsQ0FBQztJQUVELFdBQVcsQ0FBQyxPQUFxQyxFQUFFLEtBQWM7UUFDL0QsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7UUFDbEIsT0FBTyxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7SUFDM0IsQ0FBQzs7b0hBekNVLHVCQUF1Qjt3R0FBdkIsdUJBQXVCLGdEQUZ2QixDQUFDLEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsdUJBQXVCLEVBQUUsQ0FBQywySkNmNUUsa3ZCQTBCQTsyRkRUYSx1QkFBdUI7a0JBTm5DLFNBQVM7K0JBQ0UsdUJBQXVCLGFBR3RCLENBQUMsRUFBRSxPQUFPLEVBQUUsVUFBVSxFQUFFLFdBQVcseUJBQXlCLEVBQUUsQ0FBQzt3SUFNakQsVUFBVTtzQkFBbEMsU0FBUzt1QkFBQyxZQUFZIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ29tcG9uZW50LFxuICBUZW1wbGF0ZVJlZixcbiAgVmlld0NoaWxkLFxuICBWaWV3Q29udGFpbmVyUmVmLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEJhc2VDb2x1bW4gfSBmcm9tICcuLi8uLi9iYXNlLWNvbHVtbic7XG5pbXBvcnQgeyBPdmVybGF5UmVmIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL292ZXJsYXknO1xuaW1wb3J0IHtFbGl4VG9vbHRpcFNlcnZpY2V9IGZyb20gXCIuL2VsaXgtdG9vbHRpcC5zZXJ2aWNlXCI7XG5pbXBvcnQge0RhdGFTb3VyY2VNYXRlcmlhbFRhYmxlfSBmcm9tIFwiLi4vLi4vdGFibGUvdGFibGUuY29tcG9uZW50XCI7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2VsaXgtY29sdW1uLWFyZWEtdGV4dCcsXG4gIHRlbXBsYXRlVXJsOiAnLi9jb2x1bW4tYXJlYS10ZXh0LmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vY29sdW1uLWFyZWEtdGV4dC5jb21wb25lbnQuc2NzcyddLFxuICBwcm92aWRlcnM6IFt7IHByb3ZpZGU6IEJhc2VDb2x1bW4sIHVzZUV4aXN0aW5nOiBDb2x1bW5BcmVhVGV4dENvbXBvbmVudCB9XSxcbn0pXG5leHBvcnQgY2xhc3MgQ29sdW1uQXJlYVRleHRDb21wb25lbnQgZXh0ZW5kcyBCYXNlQ29sdW1uIHtcbiAgdmFsdWU6IGJvb2xlYW4gPSBmYWxzZTtcbiAgdmFyczogYW55O1xuICAvLyBAdHMtaWdub3JlXG4gIEBWaWV3Q2hpbGQoJ3Rvb2x0aXBSZWYnKSB0b29sdGlwUmVmOiBUZW1wbGF0ZVJlZjxhbnk+O1xuICAvLyBAdHMtaWdub3JlXG4gIHRvb2x0aXBPdmVybGF5OiBPdmVybGF5UmVmO1xuICB3aWR0aDogbnVtYmVyID0gNDAwO1xuXG4gIGNvbnN0cnVjdG9yKFxuXG4gICAgcHJpdmF0ZSBfZWxpeFRvb2x0aXA6IEVsaXhUb29sdGlwU2VydmljZSxcbiAgICBwcml2YXRlIF92aWV3Q29udGFpbmVyOiBWaWV3Q29udGFpbmVyUmVmXG4gICkge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICBvcGVuVG9vbHRpcChlbGVtZW50OiBIVE1MRWxlbWVudCwgbW9kZWw6IERhdGFTb3VyY2VNYXRlcmlhbFRhYmxlPGFueT4pIHtcbiAgICB0aGlzLnZhbHVlID0gZmFsc2U7XG4gICAgaWYgKCF0aGlzLnRvb2x0aXBPdmVybGF5IHx8ICF0aGlzLnRvb2x0aXBPdmVybGF5Lmhhc0F0dGFjaGVkKCkpIHtcbiAgICAgIHRoaXMudmFycyA9IG1vZGVsLm1vZGVsW3RoaXMuZmllbGRdO1xuICAgICAgdGhpcy50b29sdGlwT3ZlcmxheSA9IHRoaXMuX2VsaXhUb29sdGlwLmluaXRUb29sdGlwKFxuICAgICAgICB0aGlzLnRvb2x0aXBSZWYsXG4gICAgICAgIHRoaXMuX3ZpZXdDb250YWluZXIsXG4gICAgICAgIGVsZW1lbnQsXG4gICAgICAgIHRoaXMud2lkdGhcbiAgICAgICk7XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICB0aGlzLnRvb2x0aXBPdmVybGF5LmJhY2tkcm9wRWxlbWVudC5jbGFzc0xpc3QuYWRkKCdjdXJzb3ItcG9pbnRlcicpO1xuICAgIH1cbiAgfVxuXG4gIGNsb3NlVG9vbHRpcCgpIHtcbiAgICB0aGlzLnZhbHVlID0gdHJ1ZTtcbiAgICB0aGlzLnRvb2x0aXBPdmVybGF5LmRldGFjaCgpO1xuICAgIHRoaXMudG9vbHRpcE92ZXJsYXkuZGlzcG9zZSgpO1xuICB9XG5cbiAgZG91YmxlQ2xpY2soZWxlbWVudDogRGF0YVNvdXJjZU1hdGVyaWFsVGFibGU8YW55PiwgdmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLnZhbHVlID0gdHJ1ZTtcbiAgICBlbGVtZW50LmVkaXRhYmxlID0gdmFsdWU7XG4gIH1cbn1cbiIsIjxuZy1jb250YWluZXIgW21hdENvbHVtbkRlZl09XCJmaWVsZFwiPlxuICA8bWF0LWhlYWRlci1jZWxsIFtjbGFzc109XCJjbGFzc05hbWVcIiBtYXQtaGVhZGVyLWNlbGwgKm1hdEhlYWRlckNlbGxEZWY+e3tcbiAgICBuYW1lXG4gIH19PC9tYXQtaGVhZGVyLWNlbGw+XG4gIDxtYXQtY2VsbFxuICAgIFtjbGFzc109XCJjbGFzc05hbWVcIlxuICAgIG1hdC1jZWxsXG4gICAgKm1hdENlbGxEZWY9XCJsZXQgZWxlbWVudFwiXG4gICAgKGNsaWNrKT1cImVsZW1lbnQubW9kZWxbJ2ZpZWxkJ10gIT09ICcnICYmIG9wZW5Ub29sdGlwKHJlZmVyZW5jZSwgZWxlbWVudClcIlxuICAgICNyZWZlcmVuY2VcbiAgPlxuICAgIDx0ZXh0YXJlYVxuICAgICAgbWF0SW5wdXRcbiAgICAgIFsobmdNb2RlbCldPVwiZWxlbWVudC5tb2RlbFtmaWVsZF1cIlxuICAgICAgW2Rpc2FibGVkXT1cImVsZW1lbnQuZWRpdGFibGVcIlxuICAgICAgW25nU3R5bGVdPVwieyBjb2xvcjogJ2JsYWNrJyB9XCJcbiAgICA+PC90ZXh0YXJlYT5cblxuICAgIDxuZy10ZW1wbGF0ZSAjdG9vbHRpcFJlZj5cbiAgICAgIDxlbGl4LXRvb2x0aXAgW3dpZHRoXT1cIndpZHRoXCI+e3sgdmFycyB9fTwvZWxpeC10b29sdGlwPlxuICAgIDwvbmctdGVtcGxhdGU+XG4gIDwvbWF0LWNlbGw+XG4gIDxtYXQtZm9vdGVyLWNlbGwgKm1hdEZvb3RlckNlbGxEZWY+XG4gICAge3sgZm9vdGVyTWVzc2FnZSB9fVxuICA8L21hdC1mb290ZXItY2VsbD5cbjwvbmctY29udGFpbmVyPlxuIl19